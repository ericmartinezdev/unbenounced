{{ 'component-slick-slider.css' | asset_url | stylesheet_tag }}

<div class="slick">
  <div class="slick-container row">
    {% for product in section.settings.collection.products %}
      <div class="slide">
        <img draggable="false" src="{{ product.featured_image | image_url }}">
      </div>
    {% endfor %}
  </div>
</div>


<script>
  const slider = document.getElementsByClassName('slick')[0]
  let isDown = false;
  let startX;
  let scrollLeft;
  
  slider.addEventListener('mousedown', (e) => {
    isDown = true;
    startX = e.pageX - slider.offsetLeft;
    scrollLeft = slider.scrollLeft;
  });
  slider.addEventListener('touchstart', (e) => {
    e.preventDefault();
    isDown = true;
    startX = e.pageX - slider.offsetLeft;
    scrollLeft = slider.scrollLeft;
    console.log(e.timeStamp, 'start')
  });

  slider.addEventListener('mouseup', (e) => {
    isDown = false;
  });
  slider.addEventListener('touchend', (e) => {
    e.preventDefault();
    isDown = false;
    console.log(e.timeStamp, 'end')
  });

  slider.addEventListener('mouseleave', (e) => {
    isDown = false;
  });
  
  slider.addEventListener('mousemove', (e) => {
    if(!isDown) return; // stop the fn from running
    e.preventDefault();
    const x = e.pageX - slider.offsetLeft; 
    const walk = x - startX;
    slider.scrollLeft = scrollLeft - walk;
  });

  slider.addEventListener('touchmove', (e) => {
    e.preventDefault();
    if(!isDown) return; // stop the fn from running
    e.preventDefault();
    const x = e.pageX - slider.offsetLeft; 
    const walk = x - startX;
    slider.scrollLeft = scrollLeft - walk;
  });
</script>

{% schema %}
  {
    "name": "Slick Slider",
    "settings": [
      {
        "type": "collection",
        "id": "collection",
        "label": "Collection"
      }
    ],
    "presets": [
      {
        "name": "Slick Slider" 
      }
    ]
  }
{% endschema %}